export interface ServiceWorkerMessage<T> {
    type: string;
    payload: T;
}
export declare type ClientMessageTypes = 'MOCK_NOT_FOUND' | 'MOCK_SUCCESS' | 'INTERNAL_ERROR';
/**
 * Creates a communication channel between the client
 * and the Service Worker associated with the given event.
 */
export declare const createBroadcastChannel: (event: MessageEvent) => {
    /**
     * Sends a text message to the connected Service Worker.
     */
    send(message: {
        type: ClientMessageTypes;
        payload?: string | Record<string, any> | undefined;
    }): void;
};
export declare type ServiceWorkerMessageHandler<T> = (message: ServiceWorkerMessage<T>, event: MessageEvent) => void;
export declare const addMessageListener: <T>(type: string, handler: ServiceWorkerMessageHandler<T>, errorHandler?: (() => void) | undefined) => void;
