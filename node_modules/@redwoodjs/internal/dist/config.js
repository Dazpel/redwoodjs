"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getConfig = exports.TargetEnum = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _toml = _interopRequireDefault(require("toml"));

var _paths = require("./paths");

let TargetEnum;
exports.TargetEnum = TargetEnum;

(function (TargetEnum) {
  TargetEnum["NODE"] = "node";
  TargetEnum["BROWSER"] = "browser";
  TargetEnum["REACT_NATIVE"] = "react-native";
  TargetEnum["ELECTRON"] = "electron";
})(TargetEnum || (exports.TargetEnum = TargetEnum = {}));

// Note that web's includeEnvironmentVariables is handled in `webpack.common.js`
// https://github.com/redwoodjs/redwood/blob/d51ade08118c17459cebcdb496197ea52485364a/packages/core/config/webpack.common.js#L19
const DEFAULT_CONFIG = {
  web: {
    host: 'localhost',
    port: 8910,
    path: './web',
    target: TargetEnum.BROWSER,
    apiProxyPath: '/.netlify/functions',
    apiProxyPort: 8911
  },
  api: {
    host: 'localhost',
    port: 8911,
    path: './api',
    target: TargetEnum.NODE
  },
  browser: {
    open: false
  }
};
/**
 * These configuration options are modified by the user via the Redwood
 * config file.
 */

const getConfig = (configPath = (0, _paths.getConfigPath)()) => {
  try {
    const rawConfig = _fs.default.readFileSync(configPath, 'utf8');

    return (0, _deepmerge.default)(DEFAULT_CONFIG, _toml.default.parse(rawConfig));
  } catch (e) {
    throw new Error(`Could not parse "${configPath}": ${e}`);
  }
};

exports.getConfig = getConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25maWcudHMiXSwibmFtZXMiOlsiVGFyZ2V0RW51bSIsIkRFRkFVTFRfQ09ORklHIiwid2ViIiwiaG9zdCIsInBvcnQiLCJwYXRoIiwidGFyZ2V0IiwiQlJPV1NFUiIsImFwaVByb3h5UGF0aCIsImFwaVByb3h5UG9ydCIsImFwaSIsIk5PREUiLCJicm93c2VyIiwib3BlbiIsImdldENvbmZpZyIsImNvbmZpZ1BhdGgiLCJyYXdDb25maWciLCJmcyIsInJlYWRGaWxlU3luYyIsInRvbWwiLCJwYXJzZSIsImUiLCJFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBRUE7O0lBRVlBLFU7OztXQUFBQSxVO0FBQUFBLEVBQUFBLFU7QUFBQUEsRUFBQUEsVTtBQUFBQSxFQUFBQSxVO0FBQUFBLEVBQUFBLFU7R0FBQUEsVSwwQkFBQUEsVTs7QUFrQ1o7QUFDQTtBQUNBLE1BQU1DLGNBQXNCLEdBQUc7QUFDN0JDLEVBQUFBLEdBQUcsRUFBRTtBQUNIQyxJQUFBQSxJQUFJLEVBQUUsV0FESDtBQUVIQyxJQUFBQSxJQUFJLEVBQUUsSUFGSDtBQUdIQyxJQUFBQSxJQUFJLEVBQUUsT0FISDtBQUlIQyxJQUFBQSxNQUFNLEVBQUVOLFVBQVUsQ0FBQ08sT0FKaEI7QUFLSEMsSUFBQUEsWUFBWSxFQUFFLHFCQUxYO0FBTUhDLElBQUFBLFlBQVksRUFBRTtBQU5YLEdBRHdCO0FBUzdCQyxFQUFBQSxHQUFHLEVBQUU7QUFDSFAsSUFBQUEsSUFBSSxFQUFFLFdBREg7QUFFSEMsSUFBQUEsSUFBSSxFQUFFLElBRkg7QUFHSEMsSUFBQUEsSUFBSSxFQUFFLE9BSEg7QUFJSEMsSUFBQUEsTUFBTSxFQUFFTixVQUFVLENBQUNXO0FBSmhCLEdBVHdCO0FBZTdCQyxFQUFBQSxPQUFPLEVBQUU7QUFDUEMsSUFBQUEsSUFBSSxFQUFFO0FBREM7QUFmb0IsQ0FBL0I7QUFvQkE7Ozs7O0FBSU8sTUFBTUMsU0FBUyxHQUFHLENBQUNDLFVBQVUsR0FBRywyQkFBZCxLQUEwQztBQUNqRSxNQUFJO0FBQ0YsVUFBTUMsU0FBUyxHQUFHQyxZQUFHQyxZQUFILENBQWdCSCxVQUFoQixFQUE0QixNQUE1QixDQUFsQjs7QUFDQSxXQUFPLHdCQUFNZCxjQUFOLEVBQXNCa0IsY0FBS0MsS0FBTCxDQUFXSixTQUFYLENBQXRCLENBQVA7QUFDRCxHQUhELENBR0UsT0FBT0ssQ0FBUCxFQUFVO0FBQ1YsVUFBTSxJQUFJQyxLQUFKLENBQVcsb0JBQW1CUCxVQUFXLE1BQUtNLENBQUUsRUFBaEQsQ0FBTjtBQUNEO0FBQ0YsQ0FQTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcydcblxuaW1wb3J0IG1lcmdlIGZyb20gJ2RlZXBtZXJnZSdcbmltcG9ydCB0b21sIGZyb20gJ3RvbWwnXG5cbmltcG9ydCB7IGdldENvbmZpZ1BhdGggfSBmcm9tICcuL3BhdGhzJ1xuXG5leHBvcnQgZW51bSBUYXJnZXRFbnVtIHtcbiAgTk9ERSA9ICdub2RlJyxcbiAgQlJPV1NFUiA9ICdicm93c2VyJyxcbiAgUkVBQ1RfTkFUSVZFID0gJ3JlYWN0LW5hdGl2ZScsXG4gIEVMRUNUUk9OID0gJ2VsZWN0cm9uJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOb2RlVGFyZ2V0Q29uZmlnIHtcbiAgbmFtZT86IHN0cmluZ1xuICBob3N0OiBzdHJpbmdcbiAgcG9ydDogbnVtYmVyXG4gIHBhdGg6IHN0cmluZ1xuICB0YXJnZXQ6IFRhcmdldEVudW0uTk9ERVxufVxuXG5pbnRlcmZhY2UgQnJvd3NlclRhcmdldENvbmZpZyB7XG4gIG5hbWU/OiBzdHJpbmdcbiAgaG9zdDogc3RyaW5nXG4gIHBvcnQ6IG51bWJlclxuICBwYXRoOiBzdHJpbmdcbiAgdGFyZ2V0OiBUYXJnZXRFbnVtLkJST1dTRVJcbiAgLy8gVE9ETzogYXBpUHJveHlIb3N0OiBzdHJpbmdcbiAgYXBpUHJveHlQb3J0OiBudW1iZXJcbiAgYXBpUHJveHlQYXRoOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb25maWcge1xuICB3ZWI6IEJyb3dzZXJUYXJnZXRDb25maWdcbiAgYXBpOiBOb2RlVGFyZ2V0Q29uZmlnXG4gIGJyb3dzZXI6IHtcbiAgICBvcGVuOiBib29sZWFuIHwgc3RyaW5nXG4gIH1cbn1cblxuLy8gTm90ZSB0aGF0IHdlYidzIGluY2x1ZGVFbnZpcm9ubWVudFZhcmlhYmxlcyBpcyBoYW5kbGVkIGluIGB3ZWJwYWNrLmNvbW1vbi5qc2Bcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWR3b29kanMvcmVkd29vZC9ibG9iL2Q1MWFkZTA4MTE4YzE3NDU5Y2ViY2RiNDk2MTk3ZWE1MjQ4NTM2NGEvcGFja2FnZXMvY29yZS9jb25maWcvd2VicGFjay5jb21tb24uanMjTDE5XG5jb25zdCBERUZBVUxUX0NPTkZJRzogQ29uZmlnID0ge1xuICB3ZWI6IHtcbiAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICBwb3J0OiA4OTEwLFxuICAgIHBhdGg6ICcuL3dlYicsXG4gICAgdGFyZ2V0OiBUYXJnZXRFbnVtLkJST1dTRVIsXG4gICAgYXBpUHJveHlQYXRoOiAnLy5uZXRsaWZ5L2Z1bmN0aW9ucycsXG4gICAgYXBpUHJveHlQb3J0OiA4OTExLFxuICB9LFxuICBhcGk6IHtcbiAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICBwb3J0OiA4OTExLFxuICAgIHBhdGg6ICcuL2FwaScsXG4gICAgdGFyZ2V0OiBUYXJnZXRFbnVtLk5PREUsXG4gIH0sXG4gIGJyb3dzZXI6IHtcbiAgICBvcGVuOiBmYWxzZSxcbiAgfSxcbn1cblxuLyoqXG4gKiBUaGVzZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgYXJlIG1vZGlmaWVkIGJ5IHRoZSB1c2VyIHZpYSB0aGUgUmVkd29vZFxuICogY29uZmlnIGZpbGUuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDb25maWcgPSAoY29uZmlnUGF0aCA9IGdldENvbmZpZ1BhdGgoKSk6IENvbmZpZyA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmF3Q29uZmlnID0gZnMucmVhZEZpbGVTeW5jKGNvbmZpZ1BhdGgsICd1dGY4JylcbiAgICByZXR1cm4gbWVyZ2UoREVGQVVMVF9DT05GSUcsIHRvbWwucGFyc2UocmF3Q29uZmlnKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IHBhcnNlIFwiJHtjb25maWdQYXRofVwiOiAke2V9YClcbiAgfVxufVxuIl19