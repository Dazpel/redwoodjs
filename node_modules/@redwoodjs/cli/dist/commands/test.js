"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.handler = exports.builder = exports.description = exports.command = void 0;

var _map = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/map"));

var _execa = _interopRequireDefault(require("execa"));

var _listr = _interopRequireDefault(require("listr"));

var _listrVerboseRenderer = _interopRequireDefault(require("listr-verbose-renderer"));

var _terminalLink = _interopRequireDefault(require("terminal-link"));

var _lib = require("../lib");

var _colors = _interopRequireDefault(require("../lib/colors"));

const command = 'test [side..]';
exports.command = command;
const description = 'Run Jest tests for api and web';
exports.description = description;

const builder = yargs => {
  yargs.positional('side', {
    choices: ['api', 'web'],
    default: ['api', 'web'],
    description: 'Which side(s) to test',
    type: 'array'
  }).epilogue(`Also see the ${(0, _terminalLink.default)('Redwood CLI Reference', 'https://redwoodjs.com/reference/command-line-interface#test')}`);
};

exports.builder = builder;

const handler = async ({
  side
}) => {
  const {
    base: BASE_DIR
  } = (0, _lib.getPaths)();
  const execCommands = {
    api: {
      cwd: `${BASE_DIR}/api`,
      cmd: 'yarn jest',
      args: ['--passWithNoTests', '--config ../node_modules/@redwoodjs/core/config/jest.config.api.js']
    },
    web: {
      cwd: `${BASE_DIR}/web`,
      cmd: 'yarn jest',
      args: ['--passWithNoTests', '--config ../node_modules/@redwoodjs/core/config/jest.config.web.js']
    }
  };
  const tasks = new _listr.default((0, _map.default)(side).call(side, sideName => {
    const {
      cmd,
      args,
      cwd
    } = execCommands[sideName];
    return {
      title: `Running '${sideName}' jest tests`,
      task: () => {
        return (0, _execa.default)(cmd, args, {
          stdio: 'inherit',
          shell: true,
          cwd
        });
      }
    };
  }), {
    renderer: _listrVerboseRenderer.default
  });

  try {
    await tasks.run();
  } catch (e) {
    console.log(_colors.default.error(e.message));
  }
};

exports.handler = handler;