"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.decodeAuthToken = exports.getAuthProviderType = void 0;

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _apolloServerLambda = require("apollo-server-lambda");

var _verifyAuth0Token = require("./verifyAuth0Token");

//
// This is shared by `@redwoodjs/web`
const AUTH_PROVIDER_HEADER = 'auth-provider';

const getAuthProviderType = event => {
  return event === null || event === void 0 ? void 0 : event.headers[AUTH_PROVIDER_HEADER];
};

exports.getAuthProviderType = getAuthProviderType;

/**
 * Redwood supports multiple authentication providers. We add headers to the client
 * requests when a user is authenticated
 * - `Auth-Provider`: Denotes the authentication provider.
 * - `Authorization`: A JWT or SWT token.
 *
 * This function decodes the Authorization token.
 *
 * @returns `null` when the auth token couldn't be decoded or wasn't available.
 * @returns `object` or `string` otherwise.
 */
const decodeAuthToken = async ({
  type,
  event,
  context
}) => {
  var _event$headers, _event$headers$author, _event$headers$author2;

  const token = (_event$headers = event.headers) === null || _event$headers === void 0 ? void 0 : (_event$headers$author = _event$headers.authorization) === null || _event$headers$author === void 0 ? void 0 : (_event$headers$author2 = _event$headers$author.split(' ')) === null || _event$headers$author2 === void 0 ? void 0 : _event$headers$author2[1];

  if (!token && token.length === 0) {
    throw new Error('Empty authorization token');
  }

  let decoded = null;

  switch (type) {
    case 'goTrue':
    case 'netlify':
      {
        // Netlify verifies and decodes a JWT before the request hits the Serverless
        // function so the decoded jwt is already available in production
        if (process.env.NODE_ENV === 'production') {
          const clientContext = context.clientContext;
          decoded = (clientContext === null || clientContext === void 0 ? void 0 : clientContext.user) || null;
        } else {
          // We emualate the native Netlify experience in development mode.
          // We just decode it since we don't have the signing key.
          decoded = _jsonwebtoken.default.decode(token);
        }

        break;
      }

    case 'auth0':
      {
        decoded = await (0, _verifyAuth0Token.verifyAuth0Token)(token);
        break;
      }

    case 'firebase':
    case 'magicLink':
      {
        decoded = token;
        break;
      }
    // These tokens require a 3rd party library for decoding that we don't want to
    // bundle with each installation. We'll cover it in the documentation.

    default:
      {
        decoded = {
          type,
          token
        };
        break;
      }
  }

  if (decoded === null) {
    throw new _apolloServerLambda.AuthenticationError('The authentication token could not be decoded.');
  }

  return decoded;
};

exports.decodeAuthToken = decodeAuthToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hdXRoL2F1dGhIZWFkZXJzLnRzIl0sIm5hbWVzIjpbIkFVVEhfUFJPVklERVJfSEVBREVSIiwiZ2V0QXV0aFByb3ZpZGVyVHlwZSIsImV2ZW50IiwiaGVhZGVycyIsImRlY29kZUF1dGhUb2tlbiIsInR5cGUiLCJjb250ZXh0IiwidG9rZW4iLCJhdXRob3JpemF0aW9uIiwic3BsaXQiLCJsZW5ndGgiLCJFcnJvciIsImRlY29kZWQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJjbGllbnRDb250ZXh0IiwidXNlciIsImp3dCIsImRlY29kZSIsIkF1dGhlbnRpY2F0aW9uRXJyb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQU9BOztBQUNBOztBQUVBOztBQUpBO0FBTUE7QUFDQSxNQUFNQSxvQkFBb0IsR0FBRyxlQUE3Qjs7QUFFTyxNQUFNQyxtQkFBbUIsR0FDOUJDLEtBRGlDLElBRVY7QUFDdkIsU0FBT0EsS0FBUCxhQUFPQSxLQUFQLHVCQUFPQSxLQUFLLENBQUVDLE9BQVAsQ0FBZUgsb0JBQWYsQ0FBUDtBQUNELENBSk07Ozs7QUFZUDs7Ozs7Ozs7Ozs7QUFXTyxNQUFNSSxlQUFlLEdBQUcsT0FBTztBQUNwQ0MsRUFBQUEsSUFEb0M7QUFFcENILEVBQUFBLEtBRm9DO0FBR3BDSSxFQUFBQTtBQUhvQyxDQUFQLEtBUUw7QUFBQTs7QUFDeEIsUUFBTUMsS0FBSyxxQkFBR0wsS0FBSyxDQUFDQyxPQUFULDRFQUFHLGVBQWVLLGFBQWxCLG9GQUFHLHNCQUE4QkMsS0FBOUIsQ0FBb0MsR0FBcEMsQ0FBSCwyREFBRyx1QkFBMkMsQ0FBM0MsQ0FBZDs7QUFDQSxNQUFJLENBQUNGLEtBQUQsSUFBVUEsS0FBSyxDQUFDRyxNQUFOLEtBQWlCLENBQS9CLEVBQWtDO0FBQ2hDLFVBQU0sSUFBSUMsS0FBSixDQUFVLDJCQUFWLENBQU47QUFDRDs7QUFFRCxNQUFJQyxPQUFrQixHQUFHLElBQXpCOztBQUNBLFVBQVFQLElBQVI7QUFDRSxTQUFLLFFBQUw7QUFDQSxTQUFLLFNBQUw7QUFBZ0I7QUFDZDtBQUNBO0FBQ0EsWUFBSVEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsWUFBN0IsRUFBMkM7QUFDekMsZ0JBQU1DLGFBQWEsR0FBR1YsT0FBTyxDQUFDVSxhQUE5QjtBQUNBSixVQUFBQSxPQUFPLEdBQUcsQ0FBQUksYUFBYSxTQUFiLElBQUFBLGFBQWEsV0FBYixZQUFBQSxhQUFhLENBQUVDLElBQWYsS0FBdUIsSUFBakM7QUFDRCxTQUhELE1BR087QUFDTDtBQUNBO0FBQ0FMLFVBQUFBLE9BQU8sR0FBR00sc0JBQUlDLE1BQUosQ0FBV1osS0FBWCxDQUFWO0FBQ0Q7O0FBQ0Q7QUFDRDs7QUFDRCxTQUFLLE9BQUw7QUFBYztBQUNaSyxRQUFBQSxPQUFPLEdBQUcsTUFBTSx3Q0FBaUJMLEtBQWpCLENBQWhCO0FBQ0E7QUFDRDs7QUFFRCxTQUFLLFVBQUw7QUFDQSxTQUFLLFdBQUw7QUFBa0I7QUFDaEJLLFFBQUFBLE9BQU8sR0FBR0wsS0FBVjtBQUNBO0FBQ0Q7QUFFRDtBQUNBOztBQUNBO0FBQVM7QUFDUEssUUFBQUEsT0FBTyxHQUFHO0FBQ1JQLFVBQUFBLElBRFE7QUFFUkUsVUFBQUE7QUFGUSxTQUFWO0FBSUE7QUFDRDtBQWxDSDs7QUFxQ0EsTUFBSUssT0FBTyxLQUFLLElBQWhCLEVBQXNCO0FBQ3BCLFVBQU0sSUFBSVEsdUNBQUosQ0FDSixnREFESSxDQUFOO0FBR0Q7O0FBRUQsU0FBT1IsT0FBUDtBQUNELENBM0RNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBBUElHYXRld2F5UHJveHlFdmVudCxcbiAgQ29udGV4dCBhcyBMYW1iZGFDb250ZXh0LFxuICBDbGllbnRDb250ZXh0LFxufSBmcm9tICdhd3MtbGFtYmRhJ1xuaW1wb3J0IHR5cGUgeyBTdXBwb3J0ZWRBdXRoVHlwZXMgfSBmcm9tICdAcmVkd29vZGpzL2F1dGgnXG4vL1xuaW1wb3J0IGp3dCBmcm9tICdqc29ud2VidG9rZW4nXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvbkVycm9yIH0gZnJvbSAnYXBvbGxvLXNlcnZlci1sYW1iZGEnXG5cbmltcG9ydCB7IHZlcmlmeUF1dGgwVG9rZW4gfSBmcm9tICcuL3ZlcmlmeUF1dGgwVG9rZW4nXG5cbi8vIFRoaXMgaXMgc2hhcmVkIGJ5IGBAcmVkd29vZGpzL3dlYmBcbmNvbnN0IEFVVEhfUFJPVklERVJfSEVBREVSID0gJ2F1dGgtcHJvdmlkZXInXG5cbmV4cG9ydCBjb25zdCBnZXRBdXRoUHJvdmlkZXJUeXBlID0gKFxuICBldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnRcbik6IFN1cHBvcnRlZEF1dGhUeXBlcyA9PiB7XG4gIHJldHVybiBldmVudD8uaGVhZGVyc1tBVVRIX1BST1ZJREVSX0hFQURFUl0gYXMgU3VwcG9ydGVkQXV0aFR5cGVzXG59XG5cbnR5cGUgTmV3Q2xpZW50Q29udGV4dCA9IENsaWVudENvbnRleHQgJiB7XG4gIHVzZXI/OiBvYmplY3Rcbn1cblxuZXhwb3J0IHR5cGUgQXV0aFRva2VuID0gbnVsbCB8IG9iamVjdCB8IHN0cmluZ1xuXG4vKipcbiAqIFJlZHdvb2Qgc3VwcG9ydHMgbXVsdGlwbGUgYXV0aGVudGljYXRpb24gcHJvdmlkZXJzLiBXZSBhZGQgaGVhZGVycyB0byB0aGUgY2xpZW50XG4gKiByZXF1ZXN0cyB3aGVuIGEgdXNlciBpcyBhdXRoZW50aWNhdGVkXG4gKiAtIGBBdXRoLVByb3ZpZGVyYDogRGVub3RlcyB0aGUgYXV0aGVudGljYXRpb24gcHJvdmlkZXIuXG4gKiAtIGBBdXRob3JpemF0aW9uYDogQSBKV1Qgb3IgU1dUIHRva2VuLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZGVjb2RlcyB0aGUgQXV0aG9yaXphdGlvbiB0b2tlbi5cbiAqXG4gKiBAcmV0dXJucyBgbnVsbGAgd2hlbiB0aGUgYXV0aCB0b2tlbiBjb3VsZG4ndCBiZSBkZWNvZGVkIG9yIHdhc24ndCBhdmFpbGFibGUuXG4gKiBAcmV0dXJucyBgb2JqZWN0YCBvciBgc3RyaW5nYCBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVBdXRoVG9rZW4gPSBhc3luYyAoe1xuICB0eXBlLFxuICBldmVudCxcbiAgY29udGV4dCxcbn06IHtcbiAgdHlwZTogU3VwcG9ydGVkQXV0aFR5cGVzXG4gIGV2ZW50OiBBUElHYXRld2F5UHJveHlFdmVudFxuICBjb250ZXh0OiBMYW1iZGFDb250ZXh0XG59KTogUHJvbWlzZTxBdXRoVG9rZW4+ID0+IHtcbiAgY29uc3QgdG9rZW4gPSBldmVudC5oZWFkZXJzPy5hdXRob3JpemF0aW9uPy5zcGxpdCgnICcpPy5bMV1cbiAgaWYgKCF0b2tlbiAmJiB0b2tlbi5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0VtcHR5IGF1dGhvcml6YXRpb24gdG9rZW4nKVxuICB9XG5cbiAgbGV0IGRlY29kZWQ6IEF1dGhUb2tlbiA9IG51bGxcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnZ29UcnVlJzpcbiAgICBjYXNlICduZXRsaWZ5Jzoge1xuICAgICAgLy8gTmV0bGlmeSB2ZXJpZmllcyBhbmQgZGVjb2RlcyBhIEpXVCBiZWZvcmUgdGhlIHJlcXVlc3QgaGl0cyB0aGUgU2VydmVybGVzc1xuICAgICAgLy8gZnVuY3Rpb24gc28gdGhlIGRlY29kZWQgand0IGlzIGFscmVhZHkgYXZhaWxhYmxlIGluIHByb2R1Y3Rpb25cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGNsaWVudENvbnRleHQgPSBjb250ZXh0LmNsaWVudENvbnRleHQgYXMgTmV3Q2xpZW50Q29udGV4dFxuICAgICAgICBkZWNvZGVkID0gY2xpZW50Q29udGV4dD8udXNlciB8fCBudWxsXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSBlbXVhbGF0ZSB0aGUgbmF0aXZlIE5ldGxpZnkgZXhwZXJpZW5jZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxuICAgICAgICAvLyBXZSBqdXN0IGRlY29kZSBpdCBzaW5jZSB3ZSBkb24ndCBoYXZlIHRoZSBzaWduaW5nIGtleS5cbiAgICAgICAgZGVjb2RlZCA9IGp3dC5kZWNvZGUodG9rZW4pXG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgICBjYXNlICdhdXRoMCc6IHtcbiAgICAgIGRlY29kZWQgPSBhd2FpdCB2ZXJpZnlBdXRoMFRva2VuKHRva2VuKVxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBjYXNlICdmaXJlYmFzZSc6XG4gICAgY2FzZSAnbWFnaWNMaW5rJzoge1xuICAgICAgZGVjb2RlZCA9IHRva2VuXG4gICAgICBicmVha1xuICAgIH1cblxuICAgIC8vIFRoZXNlIHRva2VucyByZXF1aXJlIGEgM3JkIHBhcnR5IGxpYnJhcnkgZm9yIGRlY29kaW5nIHRoYXQgd2UgZG9uJ3Qgd2FudCB0b1xuICAgIC8vIGJ1bmRsZSB3aXRoIGVhY2ggaW5zdGFsbGF0aW9uLiBXZSdsbCBjb3ZlciBpdCBpbiB0aGUgZG9jdW1lbnRhdGlvbi5cbiAgICBkZWZhdWx0OiB7XG4gICAgICBkZWNvZGVkID0ge1xuICAgICAgICB0eXBlLFxuICAgICAgICB0b2tlbixcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKGRlY29kZWQgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgQXV0aGVudGljYXRpb25FcnJvcihcbiAgICAgICdUaGUgYXV0aGVudGljYXRpb24gdG9rZW4gY291bGQgbm90IGJlIGRlY29kZWQuJ1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkXG59XG4iXX0=