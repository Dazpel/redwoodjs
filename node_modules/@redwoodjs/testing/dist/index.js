"use strict";

var _Object$keys = require("@babel/runtime-corejs3/core-js/object/keys");

var _forEachInstanceProperty = require("@babel/runtime-corejs3/core-js/instance/for-each");

var _context, _context2;

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

var _exportNames = {
  graphql: true,
  rest: true,
  server: true,
  render: true
};

_Object$defineProperty(exports, "server", {
  enumerable: true,
  get: function () {
    return _mockServer.default;
  }
});

_Object$defineProperty(exports, "render", {
  enumerable: true,
  get: function () {
    return _render.customRender;
  }
});

exports.rest = exports.graphql = void 0;

var _msw = require("msw");

_forEachInstanceProperty(_context = _Object$keys(_msw)).call(_context, function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;

  _Object$defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _msw[key];
    }
  });
});

var _mockServer = _interopRequireDefault(require("./mockServer"));

var _react = require("@testing-library/react");

_forEachInstanceProperty(_context2 = _Object$keys(_react)).call(_context2, function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;

  _Object$defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _react[key];
    }
  });
});

var _render = require("./render");

// https://testing-library.com/docs/react-testing-library/setup#custom-render
const graphql = {
  query: (...args) => _mockServer.default.use(_msw.graphql.query(...args)),
  mutation: (...args) => _mockServer.default.use(_msw.graphql.mutation(...args))
};
exports.graphql = graphql;
const rest = {
  get: (...args) => _mockServer.default.use(_msw.rest.get(...args)),
  post: (...args) => _mockServer.default.use(_msw.rest.post(...args)),
  delete: (...args) => _mockServer.default.use(_msw.rest.delete(...args)),
  put: (...args) => _mockServer.default.use(_msw.rest.put(...args)),
  patch: (...args) => _mockServer.default.use(_msw.rest.patch(...args)),
  options: (...args) => _mockServer.default.use(_msw.rest.options(...args))
};
exports.rest = rest;