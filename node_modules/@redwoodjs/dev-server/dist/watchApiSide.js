"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.watchFunctions = exports.importFreshFunctions = void 0;

var _endsWith = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/ends-with"));

var _some = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/some"));

var _includes = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/includes"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/object/keys"));

var _forEach = _interopRequireDefault(require("@babel/runtime-corejs3/core-js/instance/for-each"));

var _path = _interopRequireDefault(require("path"));

var _chokidar = _interopRequireDefault(require("chokidar"));

var _register = _interopRequireDefault(require("@babel/register"));

var _requireDir = _interopRequireDefault(require("require-dir"));

// TODO: This file "watches" side for changes, but it's out of scope the "dev-server"
// package.
// Ideally a user will be able to deploy the "dev-server"/ "redwood-http-server" on
// their own infrastructure, in which case the ability to live-reload changes doesn't
// make sense.
const WATCHER_IGNORE_EXTENSIONS = ['.db', '.sqlite', '-journal'];

/**
 * Purge the require cache and import them again.
 */
const importFreshFunctions = functionsPath => {
  var _context;

  (0, _forEach.default)(_context = (0, _keys.default)(require.cache)).call(_context, key => {
    delete require.cache[key];
  });
  return (0, _requireDir.default)(functionsPath, {
    recurse: false,
    extensions: ['.js', '.ts']
  });
};

exports.importFreshFunctions = importFreshFunctions;

const watchFunctions = ({
  paths,
  onChange,
  onImport,
  onException
}) => {
  // Use babel-register to add a require hook:
  // > The require hook will bind itself to node's require and automatically
  // > compile files on the fly.
  //
  // This will use the `.babelrc.js` configuration file in the base directory
  // of the project, usually `./api/.babelrc.js`
  (0, _register.default)({
    extends: _path.default.join(paths.base, '.babelrc.js'),
    extensions: ['.js', '.ts'],
    only: [paths.base],
    ignore: ['node_modules'],
    cache: false
  });

  try {
    const functions = importFreshFunctions(paths.functions);
    onImport(functions);
  } catch (e) {
    onException(e);
  }

  const watcher = _chokidar.default.watch(paths.base, {
    ignored: file => (0, _includes.default)(file).call(file, 'node_modules') || (0, _some.default)(WATCHER_IGNORE_EXTENSIONS).call(WATCHER_IGNORE_EXTENSIONS, ext => (0, _endsWith.default)(file).call(file, ext))
  });

  watcher.on('ready', () => {
    watcher.on('all', (event, path) => {
      onChange(event, path);

      try {
        const functions = importFreshFunctions(paths.functions);
        onImport(functions);
      } catch (e) {
        console.log();
        onException(e);
      }
    });
  });
};

exports.watchFunctions = watchFunctions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93YXRjaEFwaVNpZGUudHMiXSwibmFtZXMiOlsiV0FUQ0hFUl9JR05PUkVfRVhURU5TSU9OUyIsImltcG9ydEZyZXNoRnVuY3Rpb25zIiwiZnVuY3Rpb25zUGF0aCIsInJlcXVpcmUiLCJjYWNoZSIsImtleSIsInJlY3Vyc2UiLCJleHRlbnNpb25zIiwid2F0Y2hGdW5jdGlvbnMiLCJwYXRocyIsIm9uQ2hhbmdlIiwib25JbXBvcnQiLCJvbkV4Y2VwdGlvbiIsImV4dGVuZHMiLCJwYXRoIiwiam9pbiIsImJhc2UiLCJvbmx5IiwiaWdub3JlIiwiZnVuY3Rpb25zIiwiZSIsIndhdGNoZXIiLCJjaG9raWRhciIsIndhdGNoIiwiaWdub3JlZCIsImZpbGUiLCJleHQiLCJvbiIsImV2ZW50IiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU1BOztBQUdBOztBQUNBOztBQUNBOztBQVhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFTQSxNQUFNQSx5QkFBeUIsR0FBRyxDQUFDLEtBQUQsRUFBUSxTQUFSLEVBQW1CLFVBQW5CLENBQWxDOztBQU1BOzs7QUFHTyxNQUFNQyxvQkFBb0IsR0FBSUMsYUFBRCxJQUFzQztBQUFBOztBQUN4RSxzREFBWUMsT0FBTyxDQUFDQyxLQUFwQixrQkFBb0NDLEdBQUQsSUFBUztBQUMxQyxXQUFPRixPQUFPLENBQUNDLEtBQVIsQ0FBY0MsR0FBZCxDQUFQO0FBQ0QsR0FGRDtBQUlBLFNBQU8seUJBQVdILGFBQVgsRUFBMEI7QUFDL0JJLElBQUFBLE9BQU8sRUFBRSxLQURzQjtBQUUvQkMsSUFBQUEsVUFBVSxFQUFFLENBQUMsS0FBRCxFQUFRLEtBQVI7QUFGbUIsR0FBMUIsQ0FBUDtBQUlELENBVE07Ozs7QUFXQSxNQUFNQyxjQUFjLEdBQUcsQ0FBQztBQUM3QkMsRUFBQUEsS0FENkI7QUFFN0JDLEVBQUFBLFFBRjZCO0FBRzdCQyxFQUFBQSxRQUg2QjtBQUk3QkMsRUFBQUE7QUFKNkIsQ0FBRCxLQVVsQjtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUFpQjtBQUNmQyxJQUFBQSxPQUFPLEVBQUVDLGNBQUtDLElBQUwsQ0FBVU4sS0FBSyxDQUFDTyxJQUFoQixFQUFzQixhQUF0QixDQURNO0FBRWZULElBQUFBLFVBQVUsRUFBRSxDQUFDLEtBQUQsRUFBUSxLQUFSLENBRkc7QUFHZlUsSUFBQUEsSUFBSSxFQUFFLENBQUNSLEtBQUssQ0FBQ08sSUFBUCxDQUhTO0FBSWZFLElBQUFBLE1BQU0sRUFBRSxDQUFDLGNBQUQsQ0FKTztBQUtmZCxJQUFBQSxLQUFLLEVBQUU7QUFMUSxHQUFqQjs7QUFRQSxNQUFJO0FBQ0YsVUFBTWUsU0FBUyxHQUFHbEIsb0JBQW9CLENBQUNRLEtBQUssQ0FBQ1UsU0FBUCxDQUF0QztBQUNBUixJQUFBQSxRQUFRLENBQUNRLFNBQUQsQ0FBUjtBQUNELEdBSEQsQ0FHRSxPQUFPQyxDQUFQLEVBQVU7QUFDVlIsSUFBQUEsV0FBVyxDQUFDUSxDQUFELENBQVg7QUFDRDs7QUFFRCxRQUFNQyxPQUFPLEdBQUdDLGtCQUFTQyxLQUFULENBQWVkLEtBQUssQ0FBQ08sSUFBckIsRUFBMkI7QUFDekNRLElBQUFBLE9BQU8sRUFBR0MsSUFBRCxJQUNQLHVCQUFBQSxJQUFJLE1BQUosQ0FBQUEsSUFBSSxFQUFVLGNBQVYsQ0FBSixJQUNBLG1CQUFBekIseUJBQXlCLE1BQXpCLENBQUFBLHlCQUF5QixFQUFPMEIsR0FBRCxJQUFTLHVCQUFBRCxJQUFJLE1BQUosQ0FBQUEsSUFBSSxFQUFVQyxHQUFWLENBQW5CO0FBSGMsR0FBM0IsQ0FBaEI7O0FBS0FMLEVBQUFBLE9BQU8sQ0FBQ00sRUFBUixDQUFXLE9BQVgsRUFBb0IsTUFBTTtBQUN4Qk4sSUFBQUEsT0FBTyxDQUFDTSxFQUFSLENBQVcsS0FBWCxFQUFrQixDQUFDQyxLQUFELEVBQVFkLElBQVIsS0FBaUI7QUFDakNKLE1BQUFBLFFBQVEsQ0FBQ2tCLEtBQUQsRUFBUWQsSUFBUixDQUFSOztBQUNBLFVBQUk7QUFDRixjQUFNSyxTQUFTLEdBQUdsQixvQkFBb0IsQ0FBQ1EsS0FBSyxDQUFDVSxTQUFQLENBQXRDO0FBQ0FSLFFBQUFBLFFBQVEsQ0FBQ1EsU0FBRCxDQUFSO0FBQ0QsT0FIRCxDQUdFLE9BQU9DLENBQVAsRUFBVTtBQUNWUyxRQUFBQSxPQUFPLENBQUNDLEdBQVI7QUFDQWxCLFFBQUFBLFdBQVcsQ0FBQ1EsQ0FBRCxDQUFYO0FBQ0Q7QUFDRixLQVREO0FBVUQsR0FYRDtBQVlELENBakRNIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVE9ETzogVGhpcyBmaWxlIFwid2F0Y2hlc1wiIHNpZGUgZm9yIGNoYW5nZXMsIGJ1dCBpdCdzIG91dCBvZiBzY29wZSB0aGUgXCJkZXYtc2VydmVyXCJcbi8vIHBhY2thZ2UuXG4vLyBJZGVhbGx5IGEgdXNlciB3aWxsIGJlIGFibGUgdG8gZGVwbG95IHRoZSBcImRldi1zZXJ2ZXJcIi8gXCJyZWR3b29kLWh0dHAtc2VydmVyXCIgb25cbi8vIHRoZWlyIG93biBpbmZyYXN0cnVjdHVyZSwgaW4gd2hpY2ggY2FzZSB0aGUgYWJpbGl0eSB0byBsaXZlLXJlbG9hZCBjaGFuZ2VzIGRvZXNuJ3Rcbi8vIG1ha2Ugc2Vuc2UuXG5cbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5cbmltcG9ydCB0eXBlIHsgTm9kZVRhcmdldFBhdGhzIH0gZnJvbSAnQHJlZHdvb2Rqcy9pbnRlcm5hbCdcbmltcG9ydCBjaG9raWRhciBmcm9tICdjaG9raWRhcidcbmltcG9ydCBiYWJlbFJlcXVpcmVIb29rIGZyb20gJ0BiYWJlbC9yZWdpc3RlcidcbmltcG9ydCByZXF1aXJlRGlyIGZyb20gJ3JlcXVpcmUtZGlyJ1xuXG5jb25zdCBXQVRDSEVSX0lHTk9SRV9FWFRFTlNJT05TID0gWycuZGInLCAnLnNxbGl0ZScsICctam91cm5hbCddXG5cbmV4cG9ydCBpbnRlcmZhY2UgRnVuY3Rpb25zIHtcbiAgW3BhdGg6IHN0cmluZ106IGFueVxufVxuXG4vKipcbiAqIFB1cmdlIHRoZSByZXF1aXJlIGNhY2hlIGFuZCBpbXBvcnQgdGhlbSBhZ2Fpbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGltcG9ydEZyZXNoRnVuY3Rpb25zID0gKGZ1bmN0aW9uc1BhdGg6IHN0cmluZyk6IEZ1bmN0aW9ucyA9PiB7XG4gIE9iamVjdC5rZXlzKHJlcXVpcmUuY2FjaGUpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGRlbGV0ZSByZXF1aXJlLmNhY2hlW2tleV1cbiAgfSlcblxuICByZXR1cm4gcmVxdWlyZURpcihmdW5jdGlvbnNQYXRoLCB7XG4gICAgcmVjdXJzZTogZmFsc2UsXG4gICAgZXh0ZW5zaW9uczogWycuanMnLCAnLnRzJ10sXG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCB3YXRjaEZ1bmN0aW9ucyA9ICh7XG4gIHBhdGhzLFxuICBvbkNoYW5nZSxcbiAgb25JbXBvcnQsXG4gIG9uRXhjZXB0aW9uLFxufToge1xuICBwYXRoczogTm9kZVRhcmdldFBhdGhzXG4gIG9uQ2hhbmdlOiAoZXZlbnQ6IHN0cmluZywgcGF0aDogc3RyaW5nKSA9PiB2b2lkXG4gIG9uSW1wb3J0OiAoZnVuY3Rpb25zOiBGdW5jdGlvbnMpID0+IHZvaWRcbiAgb25FeGNlcHRpb246IChlOiBFcnJvcikgPT4gdm9pZFxufSk6IHZvaWQgPT4ge1xuICAvLyBVc2UgYmFiZWwtcmVnaXN0ZXIgdG8gYWRkIGEgcmVxdWlyZSBob29rOlxuICAvLyA+IFRoZSByZXF1aXJlIGhvb2sgd2lsbCBiaW5kIGl0c2VsZiB0byBub2RlJ3MgcmVxdWlyZSBhbmQgYXV0b21hdGljYWxseVxuICAvLyA+IGNvbXBpbGUgZmlsZXMgb24gdGhlIGZseS5cbiAgLy9cbiAgLy8gVGhpcyB3aWxsIHVzZSB0aGUgYC5iYWJlbHJjLmpzYCBjb25maWd1cmF0aW9uIGZpbGUgaW4gdGhlIGJhc2UgZGlyZWN0b3J5XG4gIC8vIG9mIHRoZSBwcm9qZWN0LCB1c3VhbGx5IGAuL2FwaS8uYmFiZWxyYy5qc2BcbiAgYmFiZWxSZXF1aXJlSG9vayh7XG4gICAgZXh0ZW5kczogcGF0aC5qb2luKHBhdGhzLmJhc2UsICcuYmFiZWxyYy5qcycpLFxuICAgIGV4dGVuc2lvbnM6IFsnLmpzJywgJy50cyddLFxuICAgIG9ubHk6IFtwYXRocy5iYXNlXSxcbiAgICBpZ25vcmU6IFsnbm9kZV9tb2R1bGVzJ10sXG4gICAgY2FjaGU6IGZhbHNlLFxuICB9KVxuXG4gIHRyeSB7XG4gICAgY29uc3QgZnVuY3Rpb25zID0gaW1wb3J0RnJlc2hGdW5jdGlvbnMocGF0aHMuZnVuY3Rpb25zKVxuICAgIG9uSW1wb3J0KGZ1bmN0aW9ucylcbiAgfSBjYXRjaCAoZSkge1xuICAgIG9uRXhjZXB0aW9uKGUpXG4gIH1cblxuICBjb25zdCB3YXRjaGVyID0gY2hva2lkYXIud2F0Y2gocGF0aHMuYmFzZSwge1xuICAgIGlnbm9yZWQ6IChmaWxlOiBzdHJpbmcpID0+XG4gICAgICBmaWxlLmluY2x1ZGVzKCdub2RlX21vZHVsZXMnKSB8fFxuICAgICAgV0FUQ0hFUl9JR05PUkVfRVhURU5TSU9OUy5zb21lKChleHQpID0+IGZpbGUuZW5kc1dpdGgoZXh0KSksXG4gIH0pXG4gIHdhdGNoZXIub24oJ3JlYWR5JywgKCkgPT4ge1xuICAgIHdhdGNoZXIub24oJ2FsbCcsIChldmVudCwgcGF0aCkgPT4ge1xuICAgICAgb25DaGFuZ2UoZXZlbnQsIHBhdGgpXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBmdW5jdGlvbnMgPSBpbXBvcnRGcmVzaEZ1bmN0aW9ucyhwYXRocy5mdW5jdGlvbnMpXG4gICAgICAgIG9uSW1wb3J0KGZ1bmN0aW9ucylcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coKVxuICAgICAgICBvbkV4Y2VwdGlvbihlKVxuICAgICAgfVxuICAgIH0pXG4gIH0pXG59XG4iXX0=