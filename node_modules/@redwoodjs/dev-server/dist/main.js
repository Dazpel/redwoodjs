#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs3/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getArgsForSide = void 0;

var _yargs = _interopRequireDefault(require("yargs"));

var _internal = require("@redwoodjs/internal");

var _http = require("./http");

var _watchApiSide = require("./watchApiSide");

var _awsLambda = require("./requestHandlers/awsLambda");

var _error = require("./error");

// TODO: Expand the sides once that concept is introduced.
const getArgsForSide = side => {
  const config = (0, _internal.getConfig)();
  const {
    port,
    host
  } = config[side];
  const paths = (0, _internal.getPaths)();
  return {
    port,
    host,
    paths: paths[side]
  };
};

exports.getArgsForSide = getArgsForSide;

const {
  side
} = _yargs.default.option('side', {
  default: 'api'
}).argv;

try {
  const {
    host,
    port,
    paths
  } = getArgsForSide(side);
  (0, _http.server)({
    requestHandler: _awsLambda.requestHandler
  }).listen(port, () => {
    console.log(`Running at 'http://${host}:${port}'`);
    console.log(`Watching files in '${paths.functions}'`);
    let startBuild = new Date().getTime();
    (0, _watchApiSide.watchFunctions)({
      paths,
      onChange: () => {
        startBuild = new Date().getTime();
        process.stdout.write('Change detected, building... ');
      },
      onImport: functions => {
        console.log(`Done. Took ${new Date().getTime() - startBuild}ms.`);
        (0, _http.setLambdaFunctions)(functions);
      },
      onException: async e => {
        console.log(await (0, _error.handleError)(e));
      }
    });
  });
} catch (e) {
  (0, _error.handleError)(e).then(m => {
    console.log(m);
    process.exit(1);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbImdldEFyZ3NGb3JTaWRlIiwic2lkZSIsImNvbmZpZyIsInBvcnQiLCJob3N0IiwicGF0aHMiLCJ5YXJncyIsIm9wdGlvbiIsImRlZmF1bHQiLCJhcmd2IiwicmVxdWVzdEhhbmRsZXIiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwiZnVuY3Rpb25zIiwic3RhcnRCdWlsZCIsIkRhdGUiLCJnZXRUaW1lIiwib25DaGFuZ2UiLCJwcm9jZXNzIiwic3Rkb3V0Iiwid3JpdGUiLCJvbkltcG9ydCIsIm9uRXhjZXB0aW9uIiwiZSIsInRoZW4iLCJtIiwiZXhpdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTtBQUNPLE1BQU1BLGNBQWMsR0FDekJDLElBRDRCLElBTXpCO0FBQ0gsUUFBTUMsTUFBTSxHQUFHLDBCQUFmO0FBQ0EsUUFBTTtBQUFFQyxJQUFBQSxJQUFGO0FBQVFDLElBQUFBO0FBQVIsTUFBaUJGLE1BQU0sQ0FBQ0QsSUFBRCxDQUE3QjtBQUVBLFFBQU1JLEtBQUssR0FBRyx5QkFBZDtBQUVBLFNBQU87QUFDTEYsSUFBQUEsSUFESztBQUVMQyxJQUFBQSxJQUZLO0FBR0xDLElBQUFBLEtBQUssRUFBRUEsS0FBSyxDQUFDSixJQUFEO0FBSFAsR0FBUDtBQUtELENBakJNOzs7O0FBbUJQLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFXSyxlQUFNQyxNQUFOLENBQWEsTUFBYixFQUFxQjtBQUFFQyxFQUFBQSxPQUFPLEVBQUU7QUFBWCxDQUFyQixFQUF5Q0MsSUFBMUQ7O0FBRUEsSUFBSTtBQUNGLFFBQU07QUFBRUwsSUFBQUEsSUFBRjtBQUFRRCxJQUFBQSxJQUFSO0FBQWNFLElBQUFBO0FBQWQsTUFBd0JMLGNBQWMsQ0FBQ0MsSUFBRCxDQUE1QztBQUNBLG9CQUFPO0FBQUVTLElBQUFBLGNBQWMsRUFBZEE7QUFBRixHQUFQLEVBQTJCQyxNQUEzQixDQUFrQ1IsSUFBbEMsRUFBd0MsTUFBTTtBQUM1Q1MsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsc0JBQXFCVCxJQUFLLElBQUdELElBQUssR0FBL0M7QUFDQVMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsc0JBQXFCUixLQUFLLENBQUNTLFNBQVUsR0FBbEQ7QUFDQSxRQUFJQyxVQUFVLEdBQUcsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQWpCO0FBQ0Esc0NBQWU7QUFDYlosTUFBQUEsS0FEYTtBQUViYSxNQUFBQSxRQUFRLEVBQUUsTUFBTTtBQUNkSCxRQUFBQSxVQUFVLEdBQUcsSUFBSUMsSUFBSixHQUFXQyxPQUFYLEVBQWI7QUFDQUUsUUFBQUEsT0FBTyxDQUFDQyxNQUFSLENBQWVDLEtBQWYsQ0FBcUIsK0JBQXJCO0FBQ0QsT0FMWTtBQU1iQyxNQUFBQSxRQUFRLEVBQUdSLFNBQUQsSUFBZTtBQUN2QkYsUUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsY0FBYSxJQUFJRyxJQUFKLEdBQVdDLE9BQVgsS0FBdUJGLFVBQVcsS0FBNUQ7QUFDQSxzQ0FBbUJELFNBQW5CO0FBQ0QsT0FUWTtBQVViUyxNQUFBQSxXQUFXLEVBQUUsTUFBT0MsQ0FBUCxJQUFhO0FBQ3hCWixRQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxNQUFNLHdCQUFZVyxDQUFaLENBQWxCO0FBQ0Q7QUFaWSxLQUFmO0FBY0QsR0FsQkQ7QUFtQkQsQ0FyQkQsQ0FxQkUsT0FBT0EsQ0FBUCxFQUFVO0FBQ1YsMEJBQVlBLENBQVosRUFBZUMsSUFBZixDQUFxQkMsQ0FBRCxJQUFPO0FBQ3pCZCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWWEsQ0FBWjtBQUNBUCxJQUFBQSxPQUFPLENBQUNRLElBQVIsQ0FBYSxDQUFiO0FBQ0QsR0FIRDtBQUlEIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuaW1wb3J0IHlhcmdzIGZyb20gJ3lhcmdzJ1xuaW1wb3J0IHsgZ2V0Q29uZmlnLCBnZXRQYXRocyB9IGZyb20gJ0ByZWR3b29kanMvaW50ZXJuYWwnXG5pbXBvcnQgdHlwZSB7IE5vZGVUYXJnZXRQYXRocyB9IGZyb20gJ0ByZWR3b29kanMvaW50ZXJuYWwnXG5cbmltcG9ydCB7IHNlcnZlciwgc2V0TGFtYmRhRnVuY3Rpb25zIH0gZnJvbSAnLi9odHRwJ1xuaW1wb3J0IHsgd2F0Y2hGdW5jdGlvbnMgfSBmcm9tICcuL3dhdGNoQXBpU2lkZSdcbmltcG9ydCB7IHJlcXVlc3RIYW5kbGVyIH0gZnJvbSAnLi9yZXF1ZXN0SGFuZGxlcnMvYXdzTGFtYmRhJ1xuaW1wb3J0IHsgaGFuZGxlRXJyb3IgfSBmcm9tICcuL2Vycm9yJ1xuXG4vLyBUT0RPOiBFeHBhbmQgdGhlIHNpZGVzIG9uY2UgdGhhdCBjb25jZXB0IGlzIGludHJvZHVjZWQuXG5leHBvcnQgY29uc3QgZ2V0QXJnc0ZvclNpZGUgPSAoXG4gIHNpZGU6ICdhcGknXG4pOiB7XG4gIHBvcnQ6IG51bWJlclxuICBob3N0OiBzdHJpbmdcbiAgcGF0aHM6IE5vZGVUYXJnZXRQYXRoc1xufSA9PiB7XG4gIGNvbnN0IGNvbmZpZyA9IGdldENvbmZpZygpXG4gIGNvbnN0IHsgcG9ydCwgaG9zdCB9ID0gY29uZmlnW3NpZGVdXG5cbiAgY29uc3QgcGF0aHMgPSBnZXRQYXRocygpXG5cbiAgcmV0dXJuIHtcbiAgICBwb3J0LFxuICAgIGhvc3QsXG4gICAgcGF0aHM6IHBhdGhzW3NpZGVdLFxuICB9XG59XG5cbmNvbnN0IHsgc2lkZSB9ID0geWFyZ3Mub3B0aW9uKCdzaWRlJywgeyBkZWZhdWx0OiAnYXBpJyB9KS5hcmd2XG5cbnRyeSB7XG4gIGNvbnN0IHsgaG9zdCwgcG9ydCwgcGF0aHMgfSA9IGdldEFyZ3NGb3JTaWRlKHNpZGUgYXMgJ2FwaScpXG4gIHNlcnZlcih7IHJlcXVlc3RIYW5kbGVyIH0pLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coYFJ1bm5pbmcgYXQgJ2h0dHA6Ly8ke2hvc3R9OiR7cG9ydH0nYClcbiAgICBjb25zb2xlLmxvZyhgV2F0Y2hpbmcgZmlsZXMgaW4gJyR7cGF0aHMuZnVuY3Rpb25zfSdgKVxuICAgIGxldCBzdGFydEJ1aWxkID0gbmV3IERhdGUoKS5nZXRUaW1lKClcbiAgICB3YXRjaEZ1bmN0aW9ucyh7XG4gICAgICBwYXRocyxcbiAgICAgIG9uQ2hhbmdlOiAoKSA9PiB7XG4gICAgICAgIHN0YXJ0QnVpbGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZSgnQ2hhbmdlIGRldGVjdGVkLCBidWlsZGluZy4uLiAnKVxuICAgICAgfSxcbiAgICAgIG9uSW1wb3J0OiAoZnVuY3Rpb25zKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBEb25lLiBUb29rICR7bmV3IERhdGUoKS5nZXRUaW1lKCkgLSBzdGFydEJ1aWxkfW1zLmApXG4gICAgICAgIHNldExhbWJkYUZ1bmN0aW9ucyhmdW5jdGlvbnMpXG4gICAgICB9LFxuICAgICAgb25FeGNlcHRpb246IGFzeW5jIChlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGF3YWl0IGhhbmRsZUVycm9yKGUpKVxuICAgICAgfSxcbiAgICB9KVxuICB9KVxufSBjYXRjaCAoZSkge1xuICBoYW5kbGVFcnJvcihlKS50aGVuKChtKSA9PiB7XG4gICAgY29uc29sZS5sb2cobSlcbiAgICBwcm9jZXNzLmV4aXQoMSlcbiAgfSlcbn1cbiJdfQ==